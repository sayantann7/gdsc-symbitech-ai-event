generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id           String       @id @default(uuid())
  name         String       @unique
  members      String?
  status       String       @default("active")
  createdAt    DateTime     @default(now())
  score        Float        @default(0)
  password     String
  tokensRound1 Int          @default(500)
  tokensRound2 Int          @default(300)
  tokensRound3 Int          @default(200)
  challengeRound1 Int?       // Random challenge index for round 1
  challengeRound2 Int?       // Random challenge index for round 2  
  challengeRound3 Int?       // Random challenge index for round 3
  submissions  Submission[]
}

model Submission {
  id          String   @id @default(uuid())
  teamId      String
  round       Int?
  challenge   String?
  prompt      String
  llmResponse String
  score       Float    @default(0)
  tokensUsed  Int      @default(0)
  violations  String?
  createdAt   DateTime @default(now())
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Round {
  id          String      @id @default(uuid())
  order       Int         @unique
  title       String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  challenges  Challenge[]
}

model Challenge {
  id                 String   @id @default(uuid())
  roundId            String
  slug               String   @unique
  title              String
  description        String
  triggerDescription String?
  active             Boolean  @default(true)
  submissions        String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  constraints        Json?
  maxAttempts        Int?
  timeLimit          Int?
  round              Round    @relation(fields: [roundId], references: [id])

  @@index([roundId])
}
